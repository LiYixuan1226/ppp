@inproceedings{8377636,
 abstract = {DevOps, as a growing development practice that aims to enable faster development and efficient deployment of applications without compromising on quality, is often hampered by long cycle times. One contributing factor to long cycle times in DevOps is long build time. Automated testing in continuous integration is one of the build stages that is highly prone to long run-time due to software complexity and evolution, and inefficient due to unoptimized testing approaches. To be cost-effective, testing in continuous integration needs to use only a fast-running set of comprehensive tests that are able to ensure the level of quality needed for deployment to production. Known approaches use time-aware test selection methods to improve time-efficiency of continuous integration testing by providing optimized combinations and order of tests with respect to decreased run-time. However, focusing on time-efficiency as the sole criterion in DevOps often jeopardizes the quality of software deliveries. This paper proposes a technique that integrates fault-based and risk-based test selection and prioritization optimized for low run-time, to improve time-effectiveness of continuous integration testing, and thus reduce long cycle times in DevOps, without compromising on quality. The technique has been evaluated in testing of a large-scale configurable software in continuous integration, and has shown considerable improvement over industry practice with respect to time-efficiency.},
 author = {Dusica Marijan and Marius Liaaen and Sagar Sen},
 booktitle = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
 keywords = {Fault detection, Indexes, Industries, Optimization, Production, Software, Testing, DevOps, Continuous integration testing, Test prioritization, History-based test prioritization, Risk-based test optimization, Fault-based test prioritization},
 month = {July},
 pages = {22-27},
 title = {DevOps Improvements for Reduced Cycle Times with Integrated Test Optimizations for Continuous Integration},
 url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377636},
 year = {2018}
}

@inproceedings{8377636,
 abstract = {DevOps, as a growing development practice that aims to enable faster development and efficient deployment of applications without compromising on quality, is often hampered by long cycle times. One contributing factor to long cycle times in DevOps is long build time. Automated testing in continuous integration is one of the build stages that is highly prone to long run-time due to software complexity and evolution, and inefficient due to unoptimized testing approaches. To be cost-effective, testing in continuous integration needs to use only a fast-running set of comprehensive tests that are able to ensure the level of quality needed for deployment to production. Known approaches use time-aware test selection methods to improve time-efficiency of continuous integration testing by providing optimized combinations and order of tests with respect to decreased run-time. However, focusing on time-efficiency as the sole criterion in DevOps often jeopardizes the quality of software deliveries. This paper proposes a technique that integrates fault-based and risk-based test selection and prioritization optimized for low run-time, to improve time-effectiveness of continuous integration testing, and thus reduce long cycle times in DevOps, without compromising on quality. The technique has been evaluated in testing of a large-scale configurable software in continuous integration, and has shown considerable improvement over industry practice with respect to time-efficiency.},
 author = {Dusica Marijan and Marius Liaaen and Sagar Sen},
 booktitle = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
 keywords = {Fault detection, Indexes, Industries, Optimization, Production, Software, Testing, DevOps, Continuous integration testing, Test prioritization, History-based test prioritization, Risk-based test optimization, Fault-based test prioritization},
 month = {July},
 pages = {22-27},
 title = {DevOps Improvements for Reduced Cycle Times with Integrated Test Optimizations for Continuous Integration},
 url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377636},
 year = {2018}
}

@inproceedings{8377636,
 abstract = {DevOps, as a growing development practice that aims to enable faster development and efficient deployment of applications without compromising on quality, is often hampered by long cycle times. One contributing factor to long cycle times in DevOps is long build time. Automated testing in continuous integration is one of the build stages that is highly prone to long run-time due to software complexity and evolution, and inefficient due to unoptimized testing approaches. To be cost-effective, testing in continuous integration needs to use only a fast-running set of comprehensive tests that are able to ensure the level of quality needed for deployment to production. Known approaches use time-aware test selection methods to improve time-efficiency of continuous integration testing by providing optimized combinations and order of tests with respect to decreased run-time. However, focusing on time-efficiency as the sole criterion in DevOps often jeopardizes the quality of software deliveries. This paper proposes a technique that integrates fault-based and risk-based test selection and prioritization optimized for low run-time, to improve time-effectiveness of continuous integration testing, and thus reduce long cycle times in DevOps, without compromising on quality. The technique has been evaluated in testing of a large-scale configurable software in continuous integration, and has shown considerable improvement over industry practice with respect to time-efficiency.},
 author = {Dusica Marijan and Marius Liaaen and Sagar Sen},
 booktitle = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
 keywords = {Fault detection, Indexes, Industries, Optimization, Production, Software, Testing, DevOps, Continuous integration testing, Test prioritization, History-based test prioritization, Risk-based test optimization, Fault-based test prioritization},
 month = {July},
 pages = {22-27},
 title = {DevOps Improvements for Reduced Cycle Times with Integrated Test Optimizations for Continuous Integration},
 url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377636},
 year = {2018}
}

@inproceedings{8377636,
 abstract = {DevOps, as a growing development practice that aims to enable faster development and efficient deployment of applications without compromising on quality, is often hampered by long cycle times. One contributing factor to long cycle times in DevOps is long build time. Automated testing in continuous integration is one of the build stages that is highly prone to long run-time due to software complexity and evolution, and inefficient due to unoptimized testing approaches. To be cost-effective, testing in continuous integration needs to use only a fast-running set of comprehensive tests that are able to ensure the level of quality needed for deployment to production. Known approaches use time-aware test selection methods to improve time-efficiency of continuous integration testing by providing optimized combinations and order of tests with respect to decreased run-time. However, focusing on time-efficiency as the sole criterion in DevOps often jeopardizes the quality of software deliveries. This paper proposes a technique that integrates fault-based and risk-based test selection and prioritization optimized for low run-time, to improve time-effectiveness of continuous integration testing, and thus reduce long cycle times in DevOps, without compromising on quality. The technique has been evaluated in testing of a large-scale configurable software in continuous integration, and has shown considerable improvement over industry practice with respect to time-efficiency.},
 author = {Dusica Marijan and Marius Liaaen and Sagar Sen},
 booktitle = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
 keywords = {Fault detection, Indexes, Industries, Optimization, Production, Software, Testing, DevOps, Continuous integration testing, Test prioritization, History-based test prioritization, Risk-based test optimization, Fault-based test prioritization},
 month = {July},
 pages = {22-27},
 title = {DevOps Improvements for Reduced Cycle Times with Integrated Test Optimizations for Continuous Integration},
 url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377636},
 year = {2018}
}


@inproceedings{8377640,
 abstract = {Multi-objective evolutionary algorithm (MOEA) with the constraint solving has been successfully applied to address the configuration optimization problem in software product line (SPL), for example, the state-of-the-art SATIBEA algorithm. However, each different MOEA with special search operator demonstrates the different strength and weakness in terms of optimality and convergence speed. The SATIBEA just combines the SAT (Boolean satisfiability problem) constraint solving with the Indicator-Based Evolutionary Algorithm (IBEA) for evaluating the algorithm performance. In this paper, we propose six hybrid algorithms which combine the SAT solving with different MOEAs. Case study is based on five large-scale, rich-constrained and real-world SPLs. Empirical results demonstrate that SATMOCell algorithm obtains a competitive optimization performance to the state-of-the-art that outperforms the SATIBEA in terms of quality Hypervolume metric for 2 out of 5 SPLs within the same time budget. Moreover, the convergence speed of SATMOCell and SATssNSGA2 is comparable after 10min terminal times. Particularly, the Hypervolume value of SATssNSGA2 reports the average improvement of 1.33% after 20min terminal times.},
 author = {Huiqun Yu and Kai Shi and Jianmei Guo and Guisheng Fan and Xingguang Yang and Liqiong Chen},
 booktitle = {2018 IEEE 42nd Annual Computer Software and Applications Conference (COMPSAC)},
 keywords = {Convergence, Evolutionary computation, Optimization, Sociology, Software, Software product lines, Statistics, Constraint solving, Multi-objective evolutionary algorithm, Search-based software engineering, Software product lines},
 month = {July},
 pages = {54-63},
 title = {Combining Constraint Solving with Different MOEAs for Configuring Large Software Product Lines: A Case Study},
 url = {https://ieeexplore.ieee.org/stamp/stamp.jsp?arnumber=8377640},
 year = {2018}
}

